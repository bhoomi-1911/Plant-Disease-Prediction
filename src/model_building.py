# -*- coding: utf-8 -*-
"""model_building

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/bhoomi1911/model-building.72365ac8-2ead-4ae8-814c-7ed1f47b1f06.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250831/auto/storage/goog4_request%26X-Goog-Date%3D20250831T073510Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D57c6dffc88fae5a29ddeb62d6de5c514e54cb3459e2a4070ec9b2c6326049a0857ef5c5c7f6b002ea2bcd7188639269edca3f9668b0567b635465b92a7d15615206baabeb83a5653bd28cd5935c06e8934352b404e7bdd144bf6ef0d374466a756f31b812f370a3a5d3e4dc76c1ae2db90d22ca3fadcbb114a89794e815f034aad350abc911b8dd818ddf86ca65b49c70d5e374efd867b131baf9d139bd880f249f5738825dd526c692fd7182e145c7bc184c9f6e13fe7722f8280e9928458caad97c86613b8039c50b6a93410531de96c9d14b3d670c9c81404eabaebf3120e1376e431c3d95b0a37f21682004b0274b6cbbd199eb1ad89313b26c155d0fa28
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
vipoooool_new_plant_diseases_dataset_path = kagglehub.dataset_download('vipoooool/new-plant-diseases-dataset')

print('Data source import complete.')

"""Train Set"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import tensorflow as tf

train_set=tf.keras.utils.image_dataset_from_directory(
    directory="/kaggle/input/new-plant-diseases-dataset/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/train",
    labels="inferred",
    label_mode="categorical",
    class_names=None,
    color_mode="rgb",
    batch_size=32,
    image_size=(128,128),
    shuffle=True,
    seed=None,
    validation_split=None,
    subset=None,
    interpolation="bilinear",
    follow_links=False,
    crop_to_aspect_ratio=False,
    pad_to_aspect_ratio=False,
    data_format=None,
    verbose=True,
)

valid_set=tf.keras.utils.image_dataset_from_directory(
    directory="/kaggle/input/new-plant-diseases-dataset/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/valid",
    labels="inferred",
    label_mode="categorical",
    class_names=None,
    color_mode="rgb",
    batch_size=32,
    image_size=(128,128),
    shuffle=True,
    seed=None,
    validation_split=None,
    subset=None,
    interpolation="bilinear",
    follow_links=False,
    crop_to_aspect_ratio=False,
    pad_to_aspect_ratio=False,
    data_format=None,
    verbose=True,
)

train_set

valid_set

"""Model Building"""

from tensorflow.keras.layers import Conv2D,Dense,MaxPool2D,Flatten,Dropout
from tensorflow.keras.models import Sequential

model=Sequential()

model.add(Conv2D(filters=32,kernel_size=3,activation='relu',input_shape=[128,128,3],padding='same'))
model.add(Conv2D(filters=32,kernel_size=3,activation='relu'))
model.add(MaxPool2D(pool_size=2,strides=2))

model.add(Conv2D(filters=64,kernel_size=3,activation='relu',padding='same'))
model.add(Conv2D(filters=64,kernel_size=3,activation='relu'))
model.add(MaxPool2D(pool_size=2,strides=2))

model.add(Conv2D(filters=128,kernel_size=3,activation='relu',padding='same'))
model.add(Conv2D(filters=128,kernel_size=3,activation='relu'))
model.add(MaxPool2D(pool_size=2,strides=2))

model.add(Conv2D(filters=256,kernel_size=3,activation='relu',padding='same'))
model.add(Conv2D(filters=256,kernel_size=3,activation='relu'))
model.add(MaxPool2D(pool_size=2,strides=2))

model.add(Conv2D(filters=512,kernel_size=3,activation='relu',padding='same'))
model.add(Conv2D(filters=512,kernel_size=3,activation='relu'))
model.add(MaxPool2D(pool_size=2,strides=2))

model.add(Dropout(0.25))

model.add(Flatten())

model.add(Dense(units=1500,activation='relu'))

model.add(Dropout(0.4))

model.add(Dense(units=38,activation='softmax'))

model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.0001),loss='categorical_crossentropy',metrics=['accuracy'])

model.summary()

"""Training the Model"""

train_history=model.fit(x=train_set,validation_data=valid_set,epochs=10)

"""Model Evaluation"""

train_loss,train_accuracy=model.evaluate(train_set)

print(train_loss,train_accuracy)

valid_loss,valid_accuracy=model.evaluate(valid_set)

print(valid_loss,valid_accuracy)

model.save('/kaggle/working/my_model.h5')

train_history.history

epochs=[i for i in range(1,11)]
plt.plot(epochs,train_history.history['accuracy'],color='blue',label='Training Accuracy')
plt.plot(epochs,train_history.history['val_accuracy'],color='green',label='Validation Accuracy')
plt.xlabel('No of Epochs')
plt.ylabel('Accuracy')
plt.title('Accuracy Visualization')
plt.legend()
plt.show()

test_set=tf.keras.utils.image_dataset_from_directory(
    directory="/kaggle/input/new-plant-diseases-dataset/New Plant Diseases Dataset(Augmented)/New Plant Diseases Dataset(Augmented)/valid",
    labels="inferred",
    label_mode="categorical",
    class_names=None,
    color_mode="rgb",
    batch_size=32,
    image_size=(128,128),
    shuffle=False,
    seed=None,
    validation_split=None,
    subset=None,
    interpolation="bilinear",
    follow_links=False,
    crop_to_aspect_ratio=False,
    pad_to_aspect_ratio=False,
    data_format=None,
    verbose=True,
)

y_pred=model.predict(test_set)
y_pred,y_pred.shape

predicted_categories=tf.argmax(y_pred,axis=1)

predicted_categories

true_categories=tf.concat([y for x,y in test_set],axis=0)
true_categories

y_true=tf.argmax(true_categories,axis=1)
y_true

from sklearn.metrics import classification_report,confusion_matrix

classification_report(y_true,predicted_categories,target_names=test_set.class_names)

cm=confusion_matrix(y_true,predicted_categories)
cm.shape
cm

plt.figure(figsize=(60,60))
sns.heatmap(cm,annot=True,annot_kws={'size':20})
plt.xlabel('Predicted Class',fontsize=40)
plt.ylabel('Actual Class',fontsize=40)
plt.title('Plant Disease Prediction',fontsize=50)
plt.show()

